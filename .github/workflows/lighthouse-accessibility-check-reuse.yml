name: Lighthouse Reuse CI

on:
  workflow_dispatch:
env:
  urls: ""
jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install Lighthouse
        run: |
          npm install -g lighthouse

      - name: Fetch Product Data and Generate URLs
        run: |
          API_URL="https://market.axonivy.com/marketplace-service/api/product?type=all&language=en&size=2&isRESTClient=false"
          BASE_URL="https://market.axonivy.com"

          # Fetch API response
          RESPONSE=$(curl -s "$API_URL")

          # Generate the list of URLs and save them to a file
          echo "$BASE_URL" > urls.txt
          echo "$RESPONSE" | jq -r '.["_embedded"]["products"][]["id"]' | while read id; do
            echo "$BASE_URL/$id" >> urls.txt
          done

          # Join all lines in urls.txt into a single string, with each URL on a new line
          URLs=$(cat urls.txt | tr '\n' ',')
          URLs="${URLs%,}"
          # Save the URLs to the environment variable for later use
          echo "urls=$URLs" >> $GITHUB_ENV
      - run: mkdir -p ${{ github.workspace }}/tmp/artifacts
      - name: Lighthouse
        uses: foo-software/lighthouse-check-action@master
        with:
          outputDirectory: ${{ github.workspace }}/tmp/artifacts
          urls: ${{ env.urls }}

      - name: Generate HTML Summary
        run: |
          # Path to the result.json file from the Lighthouse report
          RESULTS_FILE="${{ github.workspace }}/tmp/artifacts/results.json"
          
          # Create an empty HTML summary file
          SUMMARY_FILE="${{ github.workspace }}/tmp/artifacts/lighthouse-summary.html"
          echo "<html>
          <head>
            <title>Lighthouse Audit Summary</title>
            <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">
            <script>
              const rowsPerPage = 5; // Number of rows per page
              let currentPage = 1;

              function paginateTable() {
                const table = document.getElementById('auditTable');
                const rows = Array.from(table.querySelectorAll('tbody tr'));
                const totalRows = rows.length;
                const totalPages = Math.ceil(totalRows / rowsPerPage);

                // Hide all rows
                rows.forEach((row, index) => {
                  row.style.display = index >= (currentPage - 1) * rowsPerPage && index < currentPage * rowsPerPage ? '' : 'none';
                });

                // Update pagination controls
                const pagination = document.getElementById('pagination');
                pagination.innerHTML = '';
                for (let i = 1; i <= totalPages; i++) {
                  pagination.innerHTML += \`<li class="page-item \${i === currentPage ? 'active' : ''}">
                    <a class="page-link" href="#" onclick="goToPage(\${i}); return false;">\${i}</a>
                  </li>\`;
                }
              }

              function goToPage(page) {
                currentPage = page;
                paginateTable();
              }

              function sortTable(columnIndex) {
                const table = document.getElementById('auditTable');
                const rows = Array.from(table.querySelectorAll('tbody tr'));
                const isAscending = table.dataset.sortOrder === 'asc';

                rows.sort((a, b) => {
                  const cellA = a.cells[columnIndex].innerText;
                  const cellB = b.cells[columnIndex].innerText;
                  return isAscending
                    ? cellA.localeCompare(cellB, undefined, { numeric: true })
                    : cellB.localeCompare(cellA, undefined, { numeric: true });
                });

                table.dataset.sortOrder = isAscending ? 'desc' : 'asc';
                rows.forEach(row => table.querySelector('tbody').appendChild(row));
                
                // Update arrows
                document.querySelectorAll('th i').forEach(icon => icon.classList.remove('bi-caret-up-fill', 'bi-caret-down-fill'));
                const arrow = isAscending ? 'bi-caret-up-fill' : 'bi-caret-down-fill';
                document.querySelector(`th[data-column="\${columnIndex}"] i`).classList.add(arrow);

                // Reapply pagination after sorting
                paginateTable();
              }

              document.addEventListener('DOMContentLoaded', () => paginateTable());
            </script>
            <style>
              th { cursor: pointer; }
              th:not([data-sortable="false"]):hover { background-color: #f8f9fa; }
              tr:hover { background-color: #f1f1f1; }
              .pagination { justify-content: center; }
            </style>
          </head>
          <body class=\"bg-light\">
            <nav class=\"navbar navbar-expand-lg navbar-light bg-light shadow-sm\">
              <div class=\"container-fluid\">
                <a class=\"navbar-brand\" href=\"#\">Lighthouse Audit</a>
              </div>
            </nav>
            <div class=\"container mt-4\">
              <h1 class=\"text-center\">Lighthouse Audit Summary</h1>
              <p class=\"text-center\">Click on column headers to sort. Navigate through pages using the pagination controls below.</p>
              <table class=\"table table-hover\" id=\"auditTable\" data-sort-order=\"asc\">
                <thead class=\"table-light\">
                  <tr>
                    <th onclick=\"sortTable(0)\" data-column=\"0\">URL <i class=\"bi\"></i></th>
                    <th onclick=\"sortTable(1)\" data-column=\"1\">Performance <i class=\"bi\"></i></th>
                    <th onclick=\"sortTable(2)\" data-column=\"2\">Accessibility <i class=\"bi\"></i></th>
                    <th onclick=\"sortTable(3)\" data-column=\"3\">Best Practices <i class=\"bi\"></i></th>
                    <th onclick=\"sortTable(4)\" data-column=\"4\">SEO <i class=\"bi\"></i></th>
                    <th data-sortable=\"false\">Report</th>
                  </tr>
                </thead>
                <tbody>
          " > $SUMMARY_FILE

          # Read and parse the JSON file, sorting URLs alphabetically
          jq -r '.[] | "\(.url),\(.scores.performance),\(.scores.accessibility),\(.scores.bestPractices),\(.scores.seo),\(.localReport)"' $RESULTS_FILE | sort -t, -k1,1 | while IFS=, read -r url performance accessibility bestPractices seo localReport; do
            reportFile=$(basename "$localReport")

            echo "<tr>
              <td><a href=\"$reportFile\" class=\"text-decoration-none\">$url</a></td>
              <td>$performance</td>
              <td>$accessibility</td>
              <td>$bestPractices</td>
              <td>$seo</td>
              <td><a href=\"$reportFile\" class=\"btn btn-sm btn-primary\">View Report</a></td>
            </tr>" >> $SUMMARY_FILE
          done

          echo "</tbody>
              </table>
              <nav aria-label=\"Page navigation\">
                <ul class=\"pagination\" id=\"pagination\"></ul>
              </nav>
            </div>
            <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>
            <script src=\"https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.js\"></script>
          </body>
          </html>" >> $SUMMARY_FILE

          echo "Summary HTML generated at $SUMMARY_FILE"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Lighthouse reports
          path: ${{ github.workspace }}/tmp/artifacts

